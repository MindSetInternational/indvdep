#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace invdep
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="investment_companies_db")]
	public partial class MyDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPhysical_Person(Physical_Person instance);
    partial void UpdatePhysical_Person(Physical_Person instance);
    partial void DeletePhysical_Person(Physical_Person instance);
    partial void InsertCompanies_Share(Companies_Share instance);
    partial void UpdateCompanies_Share(Companies_Share instance);
    partial void DeleteCompanies_Share(Companies_Share instance);
    partial void InsertCompany_type(Company_type instance);
    partial void UpdateCompany_type(Company_type instance);
    partial void DeleteCompany_type(Company_type instance);
    partial void InsertMethod(Method instance);
    partial void UpdateMethod(Method instance);
    partial void DeleteMethod(Method instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompany_Activity(Company_Activity instance);
    partial void UpdateCompany_Activity(Company_Activity instance);
    partial void DeleteCompany_Activity(Company_Activity instance);
    partial void InsertBusiness_Activity(Business_Activity instance);
    partial void UpdateBusiness_Activity(Business_Activity instance);
    partial void DeleteBusiness_Activity(Business_Activity instance);
    partial void InsertActivity_Section(Activity_Section instance);
    partial void UpdateActivity_Section(Activity_Section instance);
    partial void DeleteActivity_Section(Activity_Section instance);
    #endregion
		
		public MyDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["investment_companies_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Physical_Person> Physical_Persons
		{
			get
			{
				return this.GetTable<Physical_Person>();
			}
		}
		
		public System.Data.Linq.Table<Companies_Share> Companies_Shares
		{
			get
			{
				return this.GetTable<Companies_Share>();
			}
		}
		
		public System.Data.Linq.Table<Company_type> Company_types
		{
			get
			{
				return this.GetTable<Company_type>();
			}
		}
		
		public System.Data.Linq.Table<Method> Methods
		{
			get
			{
				return this.GetTable<Method>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Company_Activity> Company_Activities
		{
			get
			{
				return this.GetTable<Company_Activity>();
			}
		}
		
		public System.Data.Linq.Table<Business_Activity> Business_Activities
		{
			get
			{
				return this.GetTable<Business_Activity>();
			}
		}
		
		public System.Data.Linq.Table<Activity_Section> Activity_Sections
		{
			get
			{
				return this.GetTable<Activity_Section>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Physical_Persons")]
	public partial class Physical_Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Full_Name_As_in_Passport;
		
		private System.Nullable<System.DateTime> _Birth_Date;
		
		private string _PassportNumber;
		
		private string _Nationality;
		
		private string _Permanent_Address;
		
		private string _Temp_Address;
		
		private string _Phone_Number;
		
		private string _Email;
		
		private string _Residence_location;
		
		private string _Notes;
		
		private EntitySet<Companies_Share> _Companies_Shares;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Company> _Companies1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFull_Name_As_in_PassportChanging(string value);
    partial void OnFull_Name_As_in_PassportChanged();
    partial void OnBirth_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirth_DateChanged();
    partial void OnPassportNumberChanging(string value);
    partial void OnPassportNumberChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnPermanent_AddressChanging(string value);
    partial void OnPermanent_AddressChanged();
    partial void OnTemp_AddressChanging(string value);
    partial void OnTemp_AddressChanged();
    partial void OnPhone_NumberChanging(string value);
    partial void OnPhone_NumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnResidence_locationChanging(string value);
    partial void OnResidence_locationChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Physical_Person()
		{
			this._Companies_Shares = new EntitySet<Companies_Share>(new Action<Companies_Share>(this.attach_Companies_Shares), new Action<Companies_Share>(this.detach_Companies_Shares));
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Companies1 = new EntitySet<Company>(new Action<Company>(this.attach_Companies1), new Action<Company>(this.detach_Companies1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Full_Name_As_in_Passport", DbType="NVarChar(200)")]
		public string Full_Name_As_in_Passport
		{
			get
			{
				return this._Full_Name_As_in_Passport;
			}
			set
			{
				if ((this._Full_Name_As_in_Passport != value))
				{
					this.OnFull_Name_As_in_PassportChanging(value);
					this.SendPropertyChanging();
					this._Full_Name_As_in_Passport = value;
					this.SendPropertyChanged("Full_Name_As_in_Passport");
					this.OnFull_Name_As_in_PassportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Birth_Date
		{
			get
			{
				return this._Birth_Date;
			}
			set
			{
				if ((this._Birth_Date != value))
				{
					this.OnBirth_DateChanging(value);
					this.SendPropertyChanging();
					this._Birth_Date = value;
					this.SendPropertyChanged("Birth_Date");
					this.OnBirth_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassportNumber", DbType="NVarChar(50)")]
		public string PassportNumber
		{
			get
			{
				return this._PassportNumber;
			}
			set
			{
				if ((this._PassportNumber != value))
				{
					this.OnPassportNumberChanging(value);
					this.SendPropertyChanging();
					this._PassportNumber = value;
					this.SendPropertyChanged("PassportNumber");
					this.OnPassportNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(50)")]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permanent_Address", DbType="NVarChar(50)")]
		public string Permanent_Address
		{
			get
			{
				return this._Permanent_Address;
			}
			set
			{
				if ((this._Permanent_Address != value))
				{
					this.OnPermanent_AddressChanging(value);
					this.SendPropertyChanging();
					this._Permanent_Address = value;
					this.SendPropertyChanged("Permanent_Address");
					this.OnPermanent_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp_Address", DbType="NVarChar(50)")]
		public string Temp_Address
		{
			get
			{
				return this._Temp_Address;
			}
			set
			{
				if ((this._Temp_Address != value))
				{
					this.OnTemp_AddressChanging(value);
					this.SendPropertyChanging();
					this._Temp_Address = value;
					this.SendPropertyChanged("Temp_Address");
					this.OnTemp_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_Number", DbType="NVarChar(50)")]
		public string Phone_Number
		{
			get
			{
				return this._Phone_Number;
			}
			set
			{
				if ((this._Phone_Number != value))
				{
					this.OnPhone_NumberChanging(value);
					this.SendPropertyChanging();
					this._Phone_Number = value;
					this.SendPropertyChanged("Phone_Number");
					this.OnPhone_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Residence_location", DbType="NVarChar(50)")]
		public string Residence_location
		{
			get
			{
				return this._Residence_location;
			}
			set
			{
				if ((this._Residence_location != value))
				{
					this.OnResidence_locationChanging(value);
					this.SendPropertyChanging();
					this._Residence_location = value;
					this.SendPropertyChanged("Residence_location");
					this.OnResidence_locationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physical_Person_Companies_Share", Storage="_Companies_Shares", ThisKey="ID", OtherKey="ShareHolderID")]
		public EntitySet<Companies_Share> Companies_Shares
		{
			get
			{
				return this._Companies_Shares;
			}
			set
			{
				this._Companies_Shares.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physical_Person_Company", Storage="_Companies", ThisKey="ID", OtherKey="Contact_Parson")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physical_Person_Company1", Storage="_Companies1", ThisKey="ID", OtherKey="Eligable_MD_If_Exists")]
		public EntitySet<Company> Companies1
		{
			get
			{
				return this._Companies1;
			}
			set
			{
				this._Companies1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies_Shares(Companies_Share entity)
		{
			this.SendPropertyChanging();
			entity.Shareholder = this;
		}
		
		private void detach_Companies_Shares(Companies_Share entity)
		{
			this.SendPropertyChanging();
			entity.Shareholder = null;
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Physical_Person = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Physical_Person = null;
		}
		
		private void attach_Companies1(Company entity)
		{
			this.SendPropertyChanging();
			entity.Physical_Person1 = this;
		}
		
		private void detach_Companies1(Company entity)
		{
			this.SendPropertyChanging();
			entity.Physical_Person1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies_Shares")]
	public partial class Companies_Share : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private int _ShareHolderID;
		
		private System.Nullable<int> _Share_Amount_in_EURO;
		
		private System.Nullable<bool> _Wants_To_Be_MD;
		
		private System.Nullable<bool> _Is_Already_MD;
		
		private System.Nullable<bool> _Already_Got_Residence;
		
		private EntityRef<Physical_Person> _Shareholder;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnShareHolderIDChanging(int value);
    partial void OnShareHolderIDChanged();
    partial void OnShare_Amount_in_EUROChanging(System.Nullable<int> value);
    partial void OnShare_Amount_in_EUROChanged();
    partial void OnWants_To_Be_MDChanging(System.Nullable<bool> value);
    partial void OnWants_To_Be_MDChanged();
    partial void OnIs_Already_MDChanging(System.Nullable<bool> value);
    partial void OnIs_Already_MDChanged();
    partial void OnAlready_Got_ResidenceChanging(System.Nullable<bool> value);
    partial void OnAlready_Got_ResidenceChanged();
    #endregion
		
		public Companies_Share()
		{
			this._Shareholder = default(EntityRef<Physical_Person>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShareHolderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShareHolderID
		{
			get
			{
				return this._ShareHolderID;
			}
			set
			{
				if ((this._ShareHolderID != value))
				{
					if (this._Shareholder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShareHolderIDChanging(value);
					this.SendPropertyChanging();
					this._ShareHolderID = value;
					this.SendPropertyChanged("ShareHolderID");
					this.OnShareHolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Share_Amount_in_EURO", DbType="Int")]
		public System.Nullable<int> Share_Amount_in_EURO
		{
			get
			{
				return this._Share_Amount_in_EURO;
			}
			set
			{
				if ((this._Share_Amount_in_EURO != value))
				{
					this.OnShare_Amount_in_EUROChanging(value);
					this.SendPropertyChanging();
					this._Share_Amount_in_EURO = value;
					this.SendPropertyChanged("Share_Amount_in_EURO");
					this.OnShare_Amount_in_EUROChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wants_To_Be_MD", DbType="Bit")]
		public System.Nullable<bool> Wants_To_Be_MD
		{
			get
			{
				return this._Wants_To_Be_MD;
			}
			set
			{
				if ((this._Wants_To_Be_MD != value))
				{
					this.OnWants_To_Be_MDChanging(value);
					this.SendPropertyChanging();
					this._Wants_To_Be_MD = value;
					this.SendPropertyChanged("Wants_To_Be_MD");
					this.OnWants_To_Be_MDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Already_MD", DbType="Bit")]
		public System.Nullable<bool> Is_Already_MD
		{
			get
			{
				return this._Is_Already_MD;
			}
			set
			{
				if ((this._Is_Already_MD != value))
				{
					this.OnIs_Already_MDChanging(value);
					this.SendPropertyChanging();
					this._Is_Already_MD = value;
					this.SendPropertyChanged("Is_Already_MD");
					this.OnIs_Already_MDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Already_Got_Residence", DbType="Bit")]
		public System.Nullable<bool> Already_Got_Residence
		{
			get
			{
				return this._Already_Got_Residence;
			}
			set
			{
				if ((this._Already_Got_Residence != value))
				{
					this.OnAlready_Got_ResidenceChanging(value);
					this.SendPropertyChanging();
					this._Already_Got_Residence = value;
					this.SendPropertyChanged("Already_Got_Residence");
					this.OnAlready_Got_ResidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physical_Person_Companies_Share", Storage="_Shareholder", ThisKey="ShareHolderID", OtherKey="ID", IsForeignKey=true)]
		public Physical_Person Shareholder
		{
			get
			{
				return this._Shareholder.Entity;
			}
			set
			{
				Physical_Person previousValue = this._Shareholder.Entity;
				if (((previousValue != value) 
							|| (this._Shareholder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shareholder.Entity = null;
						previousValue.Companies_Shares.Remove(this);
					}
					this._Shareholder.Entity = value;
					if ((value != null))
					{
						value.Companies_Shares.Add(this);
						this._ShareHolderID = value.ID;
					}
					else
					{
						this._ShareHolderID = default(int);
					}
					this.SendPropertyChanged("Shareholder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Companies_Share", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Companies_Shares.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Companies_Shares.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company_types")]
	public partial class Company_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Company_Type_Name;
		
		private string _Description;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompany_Type_NameChanging(string value);
    partial void OnCompany_Type_NameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Company_type()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Type_Name", DbType="NVarChar(50)")]
		public string Company_Type_Name
		{
			get
			{
				return this._Company_Type_Name;
			}
			set
			{
				if ((this._Company_Type_Name != value))
				{
					this.OnCompany_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Company_Type_Name = value;
					this.SendPropertyChanged("Company_Type_Name");
					this.OnCompany_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_type_Company", Storage="_Companies", ThisKey="ID", OtherKey="Company_Type")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Company_type1 = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Company_type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Methods")]
	public partial class Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Method_Name;
		
		private string _Description;
		
		private EntitySet<Company> _Companies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMethod_NameChanging(string value);
    partial void OnMethod_NameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Method()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method_Name", DbType="NVarChar(50)")]
		public string Method_Name
		{
			get
			{
				return this._Method_Name;
			}
			set
			{
				if ((this._Method_Name != value))
				{
					this.OnMethod_NameChanging(value);
					this.SendPropertyChanging();
					this._Method_Name = value;
					this.SendPropertyChanged("Method_Name");
					this.OnMethod_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Method_Company", Storage="_Companies", ThisKey="ID", OtherKey="Method")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Method1 = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Method1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Company_Name;
		
		private string _Capital;
		
		private string _Seat;
		
		private System.Nullable<System.DateTime> _Date_of_Signature_of_APOLS;
		
		private System.Nullable<System.DateTime> _Date_Of_Signature_Of_Company_Documents;
		
		private System.Nullable<System.DateTime> _Date_Of_First_Payment;
		
		private System.Nullable<System.DateTime> _Date_Of_Second_Payment;
		
		private System.Nullable<System.DateTime> _Date_Of_Residence_Payment;
		
		private string _Notes;
		
		private System.Nullable<int> _Contact_Parson;
		
		private System.Nullable<int> _Company_Type;
		
		private System.Nullable<int> _Method;
		
		private System.Nullable<int> _Eligable_MD_If_Exists;
		
		private EntitySet<Companies_Share> _Companies_Shares;
		
		private EntitySet<Company_Activity> _Company_Activities;
		
		private EntityRef<Company_type> _Company_type1;
		
		private EntityRef<Physical_Person> _Physical_Person;
		
		private EntityRef<Physical_Person> _Physical_Person1;
		
		private EntityRef<Method> _Method1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompany_NameChanging(string value);
    partial void OnCompany_NameChanged();
    partial void OnCapitalChanging(string value);
    partial void OnCapitalChanged();
    partial void OnSeatChanging(string value);
    partial void OnSeatChanged();
    partial void OnDate_of_Signature_of_APOLSChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_of_Signature_of_APOLSChanged();
    partial void OnDate_Of_Signature_Of_Company_DocumentsChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Of_Signature_Of_Company_DocumentsChanged();
    partial void OnDate_Of_First_PaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Of_First_PaymentChanged();
    partial void OnDate_Of_Second_PaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Of_Second_PaymentChanged();
    partial void OnDate_Of_Residence_PaymentChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Of_Residence_PaymentChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnContact_ParsonChanging(System.Nullable<int> value);
    partial void OnContact_ParsonChanged();
    partial void OnCompany_TypeChanging(System.Nullable<int> value);
    partial void OnCompany_TypeChanged();
    partial void OnMethodChanging(System.Nullable<int> value);
    partial void OnMethodChanged();
    partial void OnEligable_MD_If_ExistsChanging(System.Nullable<int> value);
    partial void OnEligable_MD_If_ExistsChanged();
    #endregion
		
		public Company()
		{
			this._Companies_Shares = new EntitySet<Companies_Share>(new Action<Companies_Share>(this.attach_Companies_Shares), new Action<Companies_Share>(this.detach_Companies_Shares));
			this._Company_Activities = new EntitySet<Company_Activity>(new Action<Company_Activity>(this.attach_Company_Activities), new Action<Company_Activity>(this.detach_Company_Activities));
			this._Company_type1 = default(EntityRef<Company_type>);
			this._Physical_Person = default(EntityRef<Physical_Person>);
			this._Physical_Person1 = default(EntityRef<Physical_Person>);
			this._Method1 = default(EntityRef<Method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Name", DbType="NVarChar(50)")]
		public string Company_Name
		{
			get
			{
				return this._Company_Name;
			}
			set
			{
				if ((this._Company_Name != value))
				{
					this.OnCompany_NameChanging(value);
					this.SendPropertyChanging();
					this._Company_Name = value;
					this.SendPropertyChanged("Company_Name");
					this.OnCompany_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capital", DbType="NVarChar(50)")]
		public string Capital
		{
			get
			{
				return this._Capital;
			}
			set
			{
				if ((this._Capital != value))
				{
					this.OnCapitalChanging(value);
					this.SendPropertyChanging();
					this._Capital = value;
					this.SendPropertyChanged("Capital");
					this.OnCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat", DbType="NVarChar(50)")]
		public string Seat
		{
			get
			{
				return this._Seat;
			}
			set
			{
				if ((this._Seat != value))
				{
					this.OnSeatChanging(value);
					this.SendPropertyChanging();
					this._Seat = value;
					this.SendPropertyChanged("Seat");
					this.OnSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_Signature_of_APOLS", DbType="Date")]
		public System.Nullable<System.DateTime> Date_of_Signature_of_APOLS
		{
			get
			{
				return this._Date_of_Signature_of_APOLS;
			}
			set
			{
				if ((this._Date_of_Signature_of_APOLS != value))
				{
					this.OnDate_of_Signature_of_APOLSChanging(value);
					this.SendPropertyChanging();
					this._Date_of_Signature_of_APOLS = value;
					this.SendPropertyChanged("Date_of_Signature_of_APOLS");
					this.OnDate_of_Signature_of_APOLSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Signature_Of_Company_Documents", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Of_Signature_Of_Company_Documents
		{
			get
			{
				return this._Date_Of_Signature_Of_Company_Documents;
			}
			set
			{
				if ((this._Date_Of_Signature_Of_Company_Documents != value))
				{
					this.OnDate_Of_Signature_Of_Company_DocumentsChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Signature_Of_Company_Documents = value;
					this.SendPropertyChanged("Date_Of_Signature_Of_Company_Documents");
					this.OnDate_Of_Signature_Of_Company_DocumentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_First_Payment", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Of_First_Payment
		{
			get
			{
				return this._Date_Of_First_Payment;
			}
			set
			{
				if ((this._Date_Of_First_Payment != value))
				{
					this.OnDate_Of_First_PaymentChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_First_Payment = value;
					this.SendPropertyChanged("Date_Of_First_Payment");
					this.OnDate_Of_First_PaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Second_Payment", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Of_Second_Payment
		{
			get
			{
				return this._Date_Of_Second_Payment;
			}
			set
			{
				if ((this._Date_Of_Second_Payment != value))
				{
					this.OnDate_Of_Second_PaymentChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Second_Payment = value;
					this.SendPropertyChanged("Date_Of_Second_Payment");
					this.OnDate_Of_Second_PaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Residence_Payment", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Of_Residence_Payment
		{
			get
			{
				return this._Date_Of_Residence_Payment;
			}
			set
			{
				if ((this._Date_Of_Residence_Payment != value))
				{
					this.OnDate_Of_Residence_PaymentChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Residence_Payment = value;
					this.SendPropertyChanged("Date_Of_Residence_Payment");
					this.OnDate_Of_Residence_PaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact_Parson", DbType="Int")]
		public System.Nullable<int> Contact_Parson
		{
			get
			{
				return this._Contact_Parson;
			}
			set
			{
				if ((this._Contact_Parson != value))
				{
					if (this._Physical_Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContact_ParsonChanging(value);
					this.SendPropertyChanging();
					this._Contact_Parson = value;
					this.SendPropertyChanged("Contact_Parson");
					this.OnContact_ParsonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_Type", DbType="Int")]
		public System.Nullable<int> Company_Type
		{
			get
			{
				return this._Company_Type;
			}
			set
			{
				if ((this._Company_Type != value))
				{
					if (this._Company_type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_TypeChanging(value);
					this.SendPropertyChanging();
					this._Company_Type = value;
					this.SendPropertyChanged("Company_Type");
					this.OnCompany_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="Int")]
		public System.Nullable<int> Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					if (this._Method1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eligable_MD_If_Exists", DbType="Int")]
		public System.Nullable<int> Eligable_MD_If_Exists
		{
			get
			{
				return this._Eligable_MD_If_Exists;
			}
			set
			{
				if ((this._Eligable_MD_If_Exists != value))
				{
					if (this._Physical_Person1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEligable_MD_If_ExistsChanging(value);
					this.SendPropertyChanging();
					this._Eligable_MD_If_Exists = value;
					this.SendPropertyChanged("Eligable_MD_If_Exists");
					this.OnEligable_MD_If_ExistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Companies_Share", Storage="_Companies_Shares", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Companies_Share> Companies_Shares
		{
			get
			{
				return this._Companies_Shares;
			}
			set
			{
				this._Companies_Shares.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Company_Activity", Storage="_Company_Activities", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Company_Activity> Company_Activities
		{
			get
			{
				return this._Company_Activities;
			}
			set
			{
				this._Company_Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_type_Company", Storage="_Company_type1", ThisKey="Company_Type", OtherKey="ID", IsForeignKey=true)]
		public Company_type Company_type1
		{
			get
			{
				return this._Company_type1.Entity;
			}
			set
			{
				Company_type previousValue = this._Company_type1.Entity;
				if (((previousValue != value) 
							|| (this._Company_type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company_type1.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Company_type1.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._Company_Type = value.ID;
					}
					else
					{
						this._Company_Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company_type1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physical_Person_Company", Storage="_Physical_Person", ThisKey="Contact_Parson", OtherKey="ID", IsForeignKey=true)]
		public Physical_Person Physical_Person
		{
			get
			{
				return this._Physical_Person.Entity;
			}
			set
			{
				Physical_Person previousValue = this._Physical_Person.Entity;
				if (((previousValue != value) 
							|| (this._Physical_Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physical_Person.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Physical_Person.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._Contact_Parson = value.ID;
					}
					else
					{
						this._Contact_Parson = default(Nullable<int>);
					}
					this.SendPropertyChanged("Physical_Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Physical_Person_Company1", Storage="_Physical_Person1", ThisKey="Eligable_MD_If_Exists", OtherKey="ID", IsForeignKey=true)]
		public Physical_Person Physical_Person1
		{
			get
			{
				return this._Physical_Person1.Entity;
			}
			set
			{
				Physical_Person previousValue = this._Physical_Person1.Entity;
				if (((previousValue != value) 
							|| (this._Physical_Person1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Physical_Person1.Entity = null;
						previousValue.Companies1.Remove(this);
					}
					this._Physical_Person1.Entity = value;
					if ((value != null))
					{
						value.Companies1.Add(this);
						this._Eligable_MD_If_Exists = value.ID;
					}
					else
					{
						this._Eligable_MD_If_Exists = default(Nullable<int>);
					}
					this.SendPropertyChanged("Physical_Person1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Method_Company", Storage="_Method1", ThisKey="Method", OtherKey="ID", IsForeignKey=true)]
		public Method Method1
		{
			get
			{
				return this._Method1.Entity;
			}
			set
			{
				Method previousValue = this._Method1.Entity;
				if (((previousValue != value) 
							|| (this._Method1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Method1.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Method1.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._Method = value.ID;
					}
					else
					{
						this._Method = default(Nullable<int>);
					}
					this.SendPropertyChanged("Method1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies_Shares(Companies_Share entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Companies_Shares(Companies_Share entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Company_Activities(Company_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Company_Activities(Company_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Investment_DB_User.[Company Activities]")]
	public partial class Company_Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private int _ActivityID;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Business_Activity> _Business_Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    #endregion
		
		public Company_Activity()
		{
			this._Company = default(EntityRef<Company>);
			this._Business_Activity = default(EntityRef<Business_Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._Business_Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Company_Activity", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Company_Activities.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Company_Activities.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Business_Activity_Company_Activity", Storage="_Business_Activity", ThisKey="ActivityID", OtherKey="ID", IsForeignKey=true)]
		public Business_Activity Business_Activity
		{
			get
			{
				return this._Business_Activity.Entity;
			}
			set
			{
				Business_Activity previousValue = this._Business_Activity.Entity;
				if (((previousValue != value) 
							|| (this._Business_Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Business_Activity.Entity = null;
						previousValue.Company_Activities.Remove(this);
					}
					this._Business_Activity.Entity = value;
					if ((value != null))
					{
						value.Company_Activities.Add(this);
						this._ActivityID = value.ID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("Business_Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Investment_DB_User.[Business Activities]")]
	public partial class Business_Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Activity_Name_EN;
		
		private string _Activity_Name_SK;
		
		private string _Activity_Description_EN;
		
		private string _Activity_Description_SK;
		
		private System.Nullable<int> _Activity_Code_Number;
		
		private System.Nullable<int> _Activity_Section;
		
		private EntitySet<Company_Activity> _Company_Activities;
		
		private EntityRef<Activity_Section> _Activity_Section1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnActivity_Name_ENChanging(string value);
    partial void OnActivity_Name_ENChanged();
    partial void OnActivity_Name_SKChanging(string value);
    partial void OnActivity_Name_SKChanged();
    partial void OnActivity_Description_ENChanging(string value);
    partial void OnActivity_Description_ENChanged();
    partial void OnActivity_Description_SKChanging(string value);
    partial void OnActivity_Description_SKChanged();
    partial void OnActivity_Code_NumberChanging(System.Nullable<int> value);
    partial void OnActivity_Code_NumberChanged();
    partial void OnActivity_SectionChanging(System.Nullable<int> value);
    partial void OnActivity_SectionChanged();
    #endregion
		
		public Business_Activity()
		{
			this._Company_Activities = new EntitySet<Company_Activity>(new Action<Company_Activity>(this.attach_Company_Activities), new Action<Company_Activity>(this.detach_Company_Activities));
			this._Activity_Section1 = default(EntityRef<Activity_Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Activity Name EN]", Storage="_Activity_Name_EN", DbType="NVarChar(150)")]
		public string Activity_Name_EN
		{
			get
			{
				return this._Activity_Name_EN;
			}
			set
			{
				if ((this._Activity_Name_EN != value))
				{
					this.OnActivity_Name_ENChanging(value);
					this.SendPropertyChanging();
					this._Activity_Name_EN = value;
					this.SendPropertyChanged("Activity_Name_EN");
					this.OnActivity_Name_ENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Activity Name SK]", Storage="_Activity_Name_SK", DbType="NVarChar(150)")]
		public string Activity_Name_SK
		{
			get
			{
				return this._Activity_Name_SK;
			}
			set
			{
				if ((this._Activity_Name_SK != value))
				{
					this.OnActivity_Name_SKChanging(value);
					this.SendPropertyChanging();
					this._Activity_Name_SK = value;
					this.SendPropertyChanged("Activity_Name_SK");
					this.OnActivity_Name_SKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Activity Description EN]", Storage="_Activity_Description_EN", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Activity_Description_EN
		{
			get
			{
				return this._Activity_Description_EN;
			}
			set
			{
				if ((this._Activity_Description_EN != value))
				{
					this.OnActivity_Description_ENChanging(value);
					this.SendPropertyChanging();
					this._Activity_Description_EN = value;
					this.SendPropertyChanged("Activity_Description_EN");
					this.OnActivity_Description_ENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Activity Description SK]", Storage="_Activity_Description_SK", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Activity_Description_SK
		{
			get
			{
				return this._Activity_Description_SK;
			}
			set
			{
				if ((this._Activity_Description_SK != value))
				{
					this.OnActivity_Description_SKChanging(value);
					this.SendPropertyChanging();
					this._Activity_Description_SK = value;
					this.SendPropertyChanged("Activity_Description_SK");
					this.OnActivity_Description_SKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Activity Code Number]", Storage="_Activity_Code_Number", DbType="Int")]
		public System.Nullable<int> Activity_Code_Number
		{
			get
			{
				return this._Activity_Code_Number;
			}
			set
			{
				if ((this._Activity_Code_Number != value))
				{
					this.OnActivity_Code_NumberChanging(value);
					this.SendPropertyChanging();
					this._Activity_Code_Number = value;
					this.SendPropertyChanged("Activity_Code_Number");
					this.OnActivity_Code_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Activity Section]", Storage="_Activity_Section", DbType="Int")]
		public System.Nullable<int> Activity_Section
		{
			get
			{
				return this._Activity_Section;
			}
			set
			{
				if ((this._Activity_Section != value))
				{
					this.OnActivity_SectionChanging(value);
					this.SendPropertyChanging();
					this._Activity_Section = value;
					this.SendPropertyChanged("Activity_Section");
					this.OnActivity_SectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Business_Activity_Company_Activity", Storage="_Company_Activities", ThisKey="ID", OtherKey="ActivityID")]
		public EntitySet<Company_Activity> Company_Activities
		{
			get
			{
				return this._Company_Activities;
			}
			set
			{
				this._Company_Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Section_Business_Activity", Storage="_Activity_Section1", ThisKey="Activity_Section", OtherKey="ID", IsForeignKey=true)]
		public Activity_Section Activity_Section1
		{
			get
			{
				return this._Activity_Section1.Entity;
			}
			set
			{
				Activity_Section previousValue = this._Activity_Section1.Entity;
				if (((previousValue != value) 
							|| (this._Activity_Section1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity_Section1.Entity = null;
						previousValue.Business_Activities.Remove(this);
					}
					this._Activity_Section1.Entity = value;
					if ((value != null))
					{
						value.Business_Activities.Add(this);
						this._Activity_Section = value.ID;
					}
					else
					{
						this._Activity_Section = default(Nullable<int>);
					}
					this.SendPropertyChanged("Activity_Section1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Company_Activities(Company_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Business_Activity = this;
		}
		
		private void detach_Company_Activities(Company_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Business_Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Investment_DB_User.[Activity Sections]")]
	public partial class Activity_Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Section_Name_EN;
		
		private string _Section_Name_SK;
		
		private EntitySet<Business_Activity> _Business_Activities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSection_Name_ENChanging(string value);
    partial void OnSection_Name_ENChanged();
    partial void OnSection_Name_SKChanging(string value);
    partial void OnSection_Name_SKChanged();
    #endregion
		
		public Activity_Section()
		{
			this._Business_Activities = new EntitySet<Business_Activity>(new Action<Business_Activity>(this.attach_Business_Activities), new Action<Business_Activity>(this.detach_Business_Activities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Section Name EN]", Storage="_Section_Name_EN", DbType="NVarChar(50)")]
		public string Section_Name_EN
		{
			get
			{
				return this._Section_Name_EN;
			}
			set
			{
				if ((this._Section_Name_EN != value))
				{
					this.OnSection_Name_ENChanging(value);
					this.SendPropertyChanging();
					this._Section_Name_EN = value;
					this.SendPropertyChanged("Section_Name_EN");
					this.OnSection_Name_ENChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Section Name SK]", Storage="_Section_Name_SK", DbType="NVarChar(50)")]
		public string Section_Name_SK
		{
			get
			{
				return this._Section_Name_SK;
			}
			set
			{
				if ((this._Section_Name_SK != value))
				{
					this.OnSection_Name_SKChanging(value);
					this.SendPropertyChanging();
					this._Section_Name_SK = value;
					this.SendPropertyChanged("Section_Name_SK");
					this.OnSection_Name_SKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Section_Business_Activity", Storage="_Business_Activities", ThisKey="ID", OtherKey="Activity_Section")]
		public EntitySet<Business_Activity> Business_Activities
		{
			get
			{
				return this._Business_Activities;
			}
			set
			{
				this._Business_Activities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Business_Activities(Business_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Activity_Section1 = this;
		}
		
		private void detach_Business_Activities(Business_Activity entity)
		{
			this.SendPropertyChanging();
			entity.Activity_Section1 = null;
		}
	}
}
#pragma warning restore 1591
